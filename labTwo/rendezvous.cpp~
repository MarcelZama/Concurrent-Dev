#include "Semaphore.h"
#include <thread>
#include <vector>
#include <iostream>

/*! displays the first function in the barrier being executed */
void task(std::shared_ptr<Semaphore> mutexSem,std::shared_ptr<Semaphore> barrierSem,std::int threadCount)
{
  //WHY 2 MUTEX LOKS?
  //FOR THE THREADS TO EXECUTE THE COUT ONE BY ONE AND THEN LET THEM EXECUTE THE OTHER COUT 1 BY 1 ?
  //std::cout << "first " << std::endl;
  //put barrier code here
  //increment the counter
  // std::shared_ptr<int>threadCount
  /*
    mutexSem
   */
  
  /*barrierSem.arrive_and_wait
    std::cout << "first " << std::endl;
    threadCount--
  }
  //wait
  if(threadCount == 0)//or incremend the barrierSem
    {
      barrierSem = 1;
    }
  
  if(barrierSem == 1)
    {
      std::cout << "second" << std::endl;
      }*/
  //should be first first first first first second second second second second
  std::cout<<"first" <<std::endl;
  // std::shared_ptr<int>threadCount;
  //threadCount--;
  mutexSem.Wait();
  if(threadCount == 0)
    {
      barrierSem.Signal(); 
    }
  else
    {
      threadCount--;
      barrierSem = 1;
      std::cout<<"First"<<std::endl;
    }
  barrierSem.Wait();
  std::cout<"Second"<<std::endl;
  barrierSem.Signal();
  
  
}




int main(void){
  std::shared_ptr<Semaphore> mutexSem;
  std::shared_ptr<Semaphore> barrierSem;
  int threadCount = 5;
  mutexSem=std::make_shared<Semaphore>(1);
  barrierSem=std::make_shared<Semaphore>(0);
  threadCount=std::make_shared<int>(5);
  /*!< An array of threads*/
  std::vector<std::thread> threadArray(*threadCount);
  /*!< Pointer to barrier object*/

  for(unsigned long int i=0; i < threadArray.size(); i++){
    threadArray[i]=std::thread(task,mutexSem,barrierSem,threadCount);
  }

  for(unsigned long int i = 0; i < threadArray.size(); i++){
    threadArray[i].join();
  }
  
  return 0;
}
