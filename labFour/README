Lab Four - Producers and Consumers:

This Project implements a program that has two parts. A producer and a consumer.

Producer The producer generates random characters from ‘a’ to ‘z’ at random
intervals (between 0 and 1 second in length). It adds these to a thread
safe buffer that has a finite holding capacity of N characters. It generates
a preset number of characters (determined at runtime) and when it has
finished it add an ‘X’ character to the buffer and exits.

Consumer The consumer takes these letters from the buffer at random time
intervals (between 0 and 1 second in length) and records how many of each
letter it consumes. Once it sees an ‘X’ in the buffer it adds its character
count to a central buffer and exits.

The main file demonstrates the producer consumer implementation
in action by creating a number of consumers and producers and showing them in action.

Author:
Name: Marcel Zama
College Id: C00260146
Date 24/10/2023
GitHub: https://github.com/MarcelZama/Concurrent-Dev

Licence:

This project is safeguarded by the GNU General Public License (GPL) to promote the principles of open-source software and ensure that its benefits and freedoms are extended to all users.

See Licence for more details.

Installation:

1. Begin by installing GCC on your system.
2. Proceed to install Make for efficient project building.
3. Ensure that the pthread library is included in your system's library path.

Now, follow these steps in your terminal:

1. Open the terminal application.
2. Navigate to the specified folder.

For building the executable:

1. Execute the command "make" inside the terminal to construct the final executable.

For running the executable:/Applications/Discord.app

1.Employ the shell command ./ followed by the executable's name. Or double-click on it inside the directory folder.

Requirements:

A C++ compiler is required for executing the project.

This project is not specific to any platforms, should work on any platforms if the above requirement is fallowed.

Files:

Makefile - MakeFile processes and combines all the compiled code into an executable
main.cpp - Main file ,the place where all the magic happens
Barrier.cpp - An Implementation of a barrier Using Semaphores 
Barrier.h - Barrier Implementation
Semaphore.cpp - This code defines a C++ class named Semaphore that implements a semaphore using C++11 features such as std::mutex and std::condition_variable.
Semaphore.h - This is the header file (Semaphore.h) for a C++ class named Semaphore, which implements a semaphore using C++11 features such as std::mutex and std::condition_variable. 
LICENSE.rtf - GNU GENERAL PUBLIC LICENSE

TO DO:
Add Doxygen




